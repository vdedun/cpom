/*! \mainpage CPOM Documentation
 *
 * \section intro_sec Introduction
 *
 * CPOM is a C++ library able to compute the closest point on a mesh efficiently
 * for many query positions.
 *
 * \section requirements_sec Requirements
 *
 * A C++11 compiler is required, as well as CMake 3.0+.
 *
 * The following environments have been tested:
 * - Operating systems: OSX and Linux
 * - Compilers: Clang and GCC
 *
 * \section install_sec Build
 *
 * \subsection step1 Step 1: Compiling
 *
 *     $ mkdir build
 *     $ cd build
 *     $ cmake ..
 *     $ make all
 *
 * \subsection step2 Step 2: Running unit tests
 *
 *     $ make test
 *
 *     Running tests...
 *     Test project /Users/vincentdedun/Documents/enzo/dev/cpom/build
 *         Start 1: cpom_test
 *     1/1 Test #1: cpom_test ........................   Passed   11.97 sec
 *
 *     100% tests passed, 0 tests failed out of 1
 *
 *     Total Test time (real) =  11.98 sec
 *
 * To run timed tests (benchmarks) :
 *
 *     $ ./cpom_ut -d 1 "[.MeshBenchmark]"
 *
 *     0.000 s:     Then: The expected position is returned
 *     0.876 s:     When: Evaluating one million times the query with a position far from the plane
 *     0.876 s:    Given: A plane mesh with 4 quad faces and a ClosestPointQuery on it
 *     0.876 s: Scenario: Dense plane mesh
 *     0.000 s:     Then: The same position is returned
 *     5.657 s:     When: Evaluating one million times the query with a position at the centroid of the plane
 *     7.126 s:    Given: A plane mesh with one million quad faces and a ClosestPointQuery on it
 *     7.126 s: Scenario: Dense plane mesh
 *     0.000 s:     Then: The expected position is returned
 *     2.719 s:     When: Evaluating one thousand times the query with a position far from the plane
 *     4.042 s:    Given: A plane mesh with one million quad faces and a ClosestPointQuery on it
 *     4.042 s: Scenario: Dense plane mesh
 *     ===============================================================================
 *     All tests passed (3 assertions in 1 test case)
 *
 * \section limitation_sec Limitations
 *
 * Only triangle and quadrilateral faces are supported. General polygons should be
 * triangulated beforehand.
 *
 * \section example_sec Example
 *
 * The functor class cpom::ClosestPointQuery offers the core functionality.
 * Example usage can be found in the unit test ClosestPointQuery.ut.cpp, such as:
 * \snippet ClosestPointQuery.ut.cpp Single Triangle Mesh
 *
 */
